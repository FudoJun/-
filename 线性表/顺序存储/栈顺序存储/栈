#ifndef STACK_H
#define STACK_H

#include <optional>
#include <iostream>

template<typename T>
class Stack{
private:
    T* data;    //指向存储栈元素的数组
    int capacity;   //数组容量
    int topIndex;   //栈顶元素位置

public:
    Stack(int initialCapacity = 10);
    ~Stack();

    bool isEmpty() const;
    void push(const T& element);
    std::optional<T> pop();
    std::optional<T> top() const;
};

template<typename T>
Stack<T>::Stack(int initialCapacity)
    : capacity{initialCapacity},topIndex{-1} {
    data=new T[capacity];
}

template<typename T>
Stack<T>::~Stack(){
    delete[] data;
}

template<typename T>
bool Stack<T>::isEmpty() const {
    return topIndex == -1;
}

template<typename T>
void Stack<T>::push(const T &element) {
    if (topIndex + 1 == capacity){  //容量不足则扩容
        int newCapacity = capacity * 2;
        T* newData = new T[newCapacity];
        for (int i = 0; i < capacity; i++) {
            newData[i] = std::move(data[i]);
        }
        delete[] data;
        data = newData;
        newData = nullptr;
        capacity = newCapacity;
    }
    data[++topIndex] = element;
}

template<typename T>
std::optional<T> Stack<T>::pop() {
    if (isEmpty()){
        std::cout<<"Stack is empty! Cannot pop element."<<std::endl;
        return std::nullopt;
    }
    return data[topIndex--];
}

template<typename T>
std::optional<T> Stack<T>::top() const {
    if (isEmpty()){
        std::cout<<"Stack is empty! Cannot pop element."<<std::endl;
        return std::nullopt;
    }
    return data[topIndex];
}

#endif
