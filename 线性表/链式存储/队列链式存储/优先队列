

#include <iostream>
#include <exception>

///////////////////////// 声明 //////////////////////////

template<typename T>
class Node{
public:
    T data;
    int priority;
    Node* next;

    Node(const T& newData,int p)
        : data{newData}, priority{p}, next{nullptr}{}
};

template<typename T>
class PriorityQueue{
private:
    Node<T>* front;
    //Node<K,V>* rear;

public:
    PriorityQueue() : front{nullptr} {}
    ~PriorityQueue();

    void enqueue(const T& value, int priority);
    T dequeue();
    bool isEmpty() const;
    void printQueue() const;

};

///////////////////////// 实现 //////////////////////////

template<typename T>
PriorityQueue<T>::~PriorityQueue() {
    while (front){
        Node<T>* temp = front;
        front = front->next;
        delete temp;
        temp = nullptr;
    }
}

template<typename T>
bool PriorityQueue<T>::isEmpty() const {
    return front == nullptr;
}

template<typename T>
void PriorityQueue<T>::enqueue(const T &value, int priority) {
    Node<T>* newNode = new Node<T>(value, priority);
    if (!front || priority < front->priority){
        newNode->next = front;
        front = newNode;
    } else{
        Node<T>* current = front;
        while (current->next && current->next->priority <= priority){
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

template<typename T>
T PriorityQueue<T>::dequeue() {
    if (isEmpty()){
        throw std::out_of_range("PriorityQueue is empty.");
    }
    Node<T>* temp = front;
    T data = front->data;
    front = front->next;
    delete temp;
    temp = nullptr;
    return data;
}

template<typename T>
void PriorityQueue<T>::printQueue() const {
    Node<T>* current = front;
    std::cout<< "<<<| ";
    while (current){
        std::cout<<current->priority<<" ";
        current = current->next;
    }
    std::cout<< " |<<<";
}

