

#include <iostream>
#include "Queue.h"

template<typename T>
class BinaryTreeNode{
public:
    T data;
    BinaryTreeNode* left;
    BinaryTreeNode* right;

    BinaryTreeNode(const T& newData)
        : data{newData}, left{nullptr}, right{nullptr} {}
};

template<typename T>
class BinaryTree{
private:
    BinaryTreeNode<T>* root;
    //辅助函数
    BinaryTreeNode<T>* insertHelper(BinaryTreeNode<T>* node, const T& value);
    void preOrderHelper(BinaryTreeNode<T>* node) const;
    void inOrderHelper(BinaryTreeNode<T>* node) const;
    void postOrderHelper(BinaryTreeNode<T>* node) const;
    void levelOrderHelper(BinaryTreeNode<T>* node) const;
    std::optional<T> findHelper(BinaryTreeNode<T>* node, const T& value) const;
    T findMaxHelper(BinaryTreeNode<T>* node) const;
    BinaryTreeNode<T>* deleteNodeHelper(BinaryTreeNode<T>* node, const T& value);

public:
    BinaryTree() : root{nullptr} {}
    //对外接口
    void insert(const T& value);
    void preOrder() const;
    void inOrder() const;
    void postOrder() const;
    void levelOrder() const;
    std::optional<T> find(const T& value) const;
    T findMax() const;
    BinaryTreeNode<T>* deleteNode(const T& value);
};

template<typename T>
void BinaryTree<T>::insert(const T &value) {
    root = insertHelper(root, value);
}

template<typename T>
BinaryTreeNode<T> *BinaryTree<T>::insertHelper(BinaryTreeNode<T> *node, const T &value) {
    if (node == nullptr){
        return new BinaryTreeNode<T>(value);
    }
    //小的在左，大的在右，根节点大于所有它的左子树的节点，小于它的所有右子树的节点
    if (value < node->data){
        node->left = insertHelper(node->left, value);
    } else if (value > node->data){
        node->right = insertHelper(node->right, value);
    }
    return node;
}

template<typename T>
void BinaryTree<T>::preOrder() const {
    std::cout<<"Preorder Traversal: ";
    preOrderHelper(root);
    std::cout<<std::endl;
}

template<typename T>
void BinaryTree<T>::preOrderHelper(BinaryTreeNode<T> *node) const { //前序遍历先打印根节点，在进入左节点
    if (node != nullptr){
        std::cout<<node->data<<" ";
        preOrderHelper(node->left);
        preOrderHelper(node->right);
    }
}

template<typename T>
void BinaryTree<T>::inOrder() const {
    std::cout<<"Inorder Traversal: ";
    inOrderHelper(root);
    std::cout<<std::endl;
}

template<typename T>
void BinaryTree<T>::inOrderHelper(BinaryTreeNode<T> *node) const {  //中序遍历先进入左节点，再打印根节点
    if (node != nullptr){
        inOrderHelper(node->left);
        std::cout<<node->data<<" ";
        inOrderHelper(node->right);
    }
}

template<typename T>
void BinaryTree<T>::postOrder() const {
    std::cout<<"Postorder Traversal: ";
    postOrderHelper(root);
    std::cout<<std::endl;
}

template<typename T>
void BinaryTree<T>::postOrderHelper(BinaryTreeNode<T> *node) const {    //后续遍历先遍历左右子树，再打印根节点
    if (node != nullptr){
        postOrderHelper(node->left);
        postOrderHelper(node->right);
        std::cout<<node->data<<" ";
    }
}

template<typename T>
void BinaryTree<T>::levelOrder() const {
    std::cout<<"Level order Traversal: ";
    levelOrderHelper(root);
    std::cout<<std::endl;
}

template<typename T>
void BinaryTree<T>::levelOrderHelper(BinaryTreeNode<T>* node) const {   //层序遍历使用队列实现，先入队根节点，再入队左右子树，再依次出队
    if (node == nullptr){
        return;
    }
    Queue<BinaryTreeNode<T>*> queue;
    queue.enqueue(node);

    while (!queue.isEmpty()){   //判断队列不为空
        auto currentNode = queue.dequeque();
        if (currentNode.has_value()){
            std::cout<<currentNode.value()->data<<" ";

            if (currentNode.value()->left != nullptr){
                queue.enqueue(currentNode.value()->left);
            }
            if (currentNode.value()->right != nullptr){
                queue.enqueue(currentNode.value()->right);
            }
        }
    }
}

template<typename T>
std::optional<T> BinaryTree<T>::find(const T& value) const {
    return findHelper(root, value);
}

template<typename T>    //使用二叉查找树查找元素时，小于根节点往左，大于往右，如果找到底层都没有，则元素不在树中
std::optional<T> BinaryTree<T>::findHelper(BinaryTreeNode<T> *node, const T &value) const {
    /* if (node == nullptr){
       return std::nullopt;
   }

    if (value == node->data){
       return node->data;
   }
   if (value < node->data){
       return findHelper(node->left, value);
   }
   if (value > node->data){
       return findHelper(node->right, value);
   }*/ //递归实现

    //非递归实现
    while (node){
        if (value == node->data){
            return value;
        } else if (value < node->data){
            node = node->left;
        } else{
            node = node->right;
        }
    }
    return std::nullopt;
}

template<typename T>
T BinaryTree<T>::findMax() const {
    findMaxHelper(root);
}

template<typename T>
T BinaryTree<T>::findMaxHelper(BinaryTreeNode<T> *node) const {
    if (node == nullptr){
        return NULL;
    }
    while (node->right){
        node = node->right;
    }
    return node->data;
}

template<typename T>
BinaryTreeNode<T> *BinaryTree<T>::deleteNode(const T &value) {
    return deleteNodeHelper(root, value);
}

template<typename T>
BinaryTreeNode<T> *BinaryTree<T>::deleteNodeHelper(BinaryTreeNode<T> *node, const T &value) {
    if (node == nullptr){   //没有找到
        return nullptr;
    }

    if (value < node->data){
        node->left = deleteNodeHelper(node->left, value);
    } else if (value > node->data){
        node->right = deleteNodeHelper(node->right, value);
    } else{
        if (node->left && node->right){ //待删除节点有左右子节点时,使用左子树最大值代替当前待删除元素
            T leftMax = findMaxHelper(node->left);
            node->data = leftMax;
            node->left = deleteNodeHelper(node->left,leftMax);
        } else{
            auto temp = node;   //如果待删除节点有0个或一个子节点，则令待删除节点的父节点的相应指针指向该节点的唯一子节点或者指向空
            if (node->left){
                node = node->left;
            } else{
                node = node->right;
            }
            delete temp;
            temp = nullptr;
            return node;
        }
    }
    return node;
}


