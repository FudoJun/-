
#include <iostream>
#include <vector>
#include "DoublyLInkedList.h"
#include "Queue.h"

///////////////////////// 声明 ///////////////////////////

template<typename T>
class VertexNode{
public:
    T Vertex;
    DoublyLinkedList<int> edge;

    VertexNode(const T& vertex)
        : Vertex{vertex}, edge{} {}
};

template<typename T>
class DirectedGraph{
private:
    std::vector<VertexNode<T>*> vertex;
    int vertexCount{};
    int edgeCount{};
    bool isInVector(const T& vertexData);
    bool dfsHelper(int from, int to, std::vector<int>& visited, Node<int>* node);
    bool bfsHelper(int from, int to, std::vector<int>& visited, Queue<Node<int>*>& queue);

public:
    void addVertex(const T& vertexData);
    void addEdge(int from, int to);
    void printGraph();
    // 从起始节点开始，沿着一条路径尽可能深地搜索，直到达到最深的节点，
    // 然后回溯到前一个节点，继续沿着另一条路径搜索，直到遍历完所有路径。
    // 使用栈或者递归实现
    bool dfs(int from, int to);

    // 从起始节点开始，依次访问起始节点的邻居节点，然后访问邻居节点的邻居节点，
    // 依此类推，直到遍历完所有与起始节点直接或间接相连的节点。
    // 使用队列实现。
    bool bfs(int from, int to);
};

///////////////////////// 实现 ///////////////////////////

template<typename T>
void DirectedGraph<T>::addVertex(const T &vertexData) {
    if (isInVector(vertexData) == false){
        VertexNode<T>* newVertex = new VertexNode<T>(vertexData);
        vertex.push_back(newVertex);
        std::cout<<"Vertex "<<vertexData<<" added."<<std::endl;
        vertexCount++;
    }
}

template<typename T>
void DirectedGraph<T>::addEdge(int from, int to) {
    if (from < 0 || from >= vertexCount || to < 0 || to >= vertexCount){
        std::cerr<<"Invalid vertex index."<<std::endl;
        return;
    }
    if (vertex[from]->edge.locateNodeWithValue(to) == false){   //当前from节点没有储存到to的边
        vertex[from]->edge.append(to);
        edgeCount++;
        std::cout<<"Edge "<<from<<" to "<<to<<" added."<<std::endl;
    } else{
        std::cout<<"Current edge already exists."<<std::endl;
    }
}

template<typename T>
void DirectedGraph<T>::printGraph() {
    for (auto& i : vertex) {
        std::cout<<i->Vertex<<" | ";
        i->edge.printForward();
        std::cout<<std::endl;
    }
}

template<typename T>
bool DirectedGraph<T>::isInVector(const T &vertexData) {
    for (auto i : vertex) {
        if (i->Vertex == vertexData){
            return true;
        }
    }
    return false;
}

template<typename T>
bool DirectedGraph<T>::dfs(int from, int to) {
    std::vector<int> visited(vertexCount,0);
    if (from < 0 || from >= vertexCount || to < 0 || to >= vertexCount){
        std::cerr<<"Invalid vertex index."<<std::endl;
        return false;
    }
    Node<int>* node = vertex[from]->edge.getHead();
    return dfsHelper(from,to,visited,node);
}

template<typename T>
bool DirectedGraph<T>::dfsHelper(int from, int to, std::vector<int> &visited, Node<int>* node) {
    visited[from] = 1;
    std::cout<<vertex[from]->Vertex<<" -> ";
    if (from == to){    //此处使用索引判断是否找到目标节点，也可使用实际存储的数据判断，如 vertex[from]->Vertex == vertex[to]->Vertex
        return true;
    }
    while (node){
        if (visited[node->data] != 1){
            if (dfsHelper(node->data, to, visited, vertex[node->data]->edge.getHead())){
                return true;
            }
        }
        node = node->next;
    }
    return false;
}

template<typename T>
bool DirectedGraph<T>::bfs(int from, int to) {
    if (from < 0 || from >= vertexCount || to < 0 || to >= vertexCount){
        std::cerr<<"Invalid vertex index."<<std::endl;
        return false;
    }
    std::vector<int> visited(vertexCount,0);
    Queue<Node<int>*> queue;

    return bfsHelper(from, to, visited, queue);
}

template<typename T>
bool DirectedGraph<T>::bfsHelper(int from, int to, std::vector<int> &visited, Queue<Node<int>*>& queue) {
    queue.enqueue(vertex[from]->edge.getHead());
    visited[from] = 1;
    std::cout<<vertex[from]->Vertex<<" -> ";
    while (!queue.isEmpty()){
        auto qNode = queue.dequeque().value();
        if (visited[to] == 1){
            return true;
        }
        while (qNode){
            std::cout<<vertex[qNode->data]->Vertex<<" -> ";
            if (visited[qNode->data] != 1){
                queue.enqueue(vertex[qNode->data]->edge.getHead());
                visited[qNode->data] = 1;
            }
            qNode = qNode->next;
        }
    }
    return false;
}
