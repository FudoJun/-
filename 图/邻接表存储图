
#include <iostream>
#include <vector>
#include "DoublyLInkedList.h"

///////////////////////// 声明 ///////////////////////////

template<typename T>
class VertexNode{
public:
    T Vertex;
    DoublyLinkedList<int> edge;

    VertexNode(const T& vertex)
        : Vertex{vertex}, edge{} {}
};

template<typename T>
class DirectedGraph{
private:
    std::vector<VertexNode<T>*> vertex;
    int vertexCount{};
    int edgeCount{};
    bool isInVector(const T& vertexData);

public:
    void addVertex(const T& vertexData);
    void addEdge(int from, int to);
    void printGraph();
};

///////////////////////// 实现 ///////////////////////////

template<typename T>
void DirectedGraph<T>::addVertex(const T &vertexData) {
    if (isInVector(vertexData) == false){
        VertexNode<T>* newVertex = new VertexNode<T>(vertexData);
        vertex.push_back(newVertex);
        std::cout<<"Vertex "<<vertexData<<" added."<<std::endl;
        vertexCount++;
    }
}

template<typename T>
void DirectedGraph<T>::addEdge(int from, int to) {
    if (from < 0 || from >= vertexCount || to < 0 || to >= vertexCount){
        std::cerr<<"Invalid vertex index."<<std::endl;
        return;
    }
    if (vertex[from]->edge.locateNodeWithValue(to) == false){   //当前from节点没有储存到to的边
        vertex[from]->edge.append(to);
        edgeCount++;
        std::cout<<"Edge "<<from<<" to "<<to<<" added."<<std::endl;
    } else{
        std::cout<<"Current edge already exists."<<std::endl;
    }
}

template<typename T>
void DirectedGraph<T>::printGraph() {
    for (auto& i : vertex) {
        std::cout<<i->Vertex<<" | ";
        i->edge.printForward();
        std::cout<<std::endl;
    }
}

template<typename T>
bool DirectedGraph<T>::isInVector(const T &vertexData) {
    for (auto i : vertex) {
        if (i->Vertex == vertexData){
            return true;
        }
    }
    return false;
}
